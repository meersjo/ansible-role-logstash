input {
  beats {
    port => 5050
  }
}

filter {
  # Filebeat zet het type afhankelijk van de bronfile.
  #--------------------type = sessions--------------------
  if [type] == "sessions" {
    # Loglijn opsplitsen in verschillende fields.
    grok {
      match => [ "message", "%{DATA:TS-temp};%{WORD:openclose};%{WORD:username};%{UUID:accesskey}(;%{DATA:TS-open2};%{GREEDYDATA:duration})?" ]
    }
    # Timestamp omzetten naar ZULU timestamp en in het juiste field zetten.
    if [openclose] == "CLOSE" {
      date {
        timezone => "Europe/Brussels"
        match => [ "TS-temp", "yyyy/MM/dd HH:mm:ss" ]
        target => "TS-close"
      }
      mutate {
        update => { "TS-temp" => "%{TS-open2}" }
        remove_field => [ "TS-open2" ]
      }
    }
    # Timestamps omzetten naar ZULU timestamp en in het juiste field zetten.
    date {
      timezone => "Europe/Brussels"
      match => [ "TS-temp", "yyyy/MM/dd HH:mm:ss" ]
      target => "TS-open"
    }
    # Overbodige velden weggooien.
    mutate {
      remove_field => [ "TS-temp", "openclose" ]
    }
  }
  #--------------------type = lighttable_loadtimes--------------------
  if [type] == "lighttable_loadtimes" {
    grok {
      match => [ "message", "\[%{WORD}\] %{TIMESTAMP_ISO8601:TS-temp} %{NUMBER} ### End Lighttable: Server Elapsed Time:%{NUMBER:load-time:int} ms" ]
    }
    # Timestamps omzetten naar ZULU timestamp en in het juiste field zetten.
    date {
      timezone => "Europe/Brussels"
      match => [ "TS-temp", "yyyy-MM-dd HH:mm:ss" ]
      target => "TS-logged"
    }
    # Overbodige velden weggooien.
    mutate {
      remove_field => [ "TS-temp" ]
    }
  }
  #--------------------type = video_analyses--------------------
  if [type] == "video_analyses" {
    # Loglijn opsplitsen in verschillende fields.
    grok {
      match => [ "message", "\[%{TIMESTAMP_ISO8601:datum}\] \[%{WORD}\] \[%{NUMBER}\] %{GREEDYDATA}<DMGuid>%{GREEDYDATA:DMGuid}</DMGuid>%{GREEDYDATA}<AnalysisType>%{WORD:AnalysisType}</AnalysisType>",
                 "message", "\[%{TIMESTAMP_ISO8601:datum}\] \[%{WORD}\] \[%{NUMBER}\] material frame size: %{GREEDYDATA:ARvideo}",
                 "message", "\[%{TIMESTAMP_ISO8601:datum}\] \[%{WORD}\] \[%{NUMBER}\] keyframe size to extract: %{GREEDYDATA:ARkeyframe}",
                 "message", "\[%{TIMESTAMP_ISO8601:datum}\] \[%{WORD}\] \[%{NUMBER}\] Duration: %{NUMBER:VideoLength:int} ms \(",
                 "message", "\[%{TIMESTAMP_ISO8601:datum}\] \[%{WORD}\] \[%{NUMBER}\] analysis completed in %{NUMBER:AnalysisDuration:int}",
                 "message", "\[%{TIMESTAMP_ISO8601:datum}\] \[%{WORD}\] \[%{NUMBER}\] extracted keyframes: %{NUMBER:AantalKeyframes:int}" ]
    }
    # Extract workflowID from source field.
    grok {
      match => [ "source", "%{GREEDYDATA}%{UUID:WorkflowID}\.log"  ]
    }
    # Overbodige velden weggooien.
    mutate {
      remove_field => [ "message" ]
    }
    # Onnodige loglijnen weggooien.
    if "_grokparsefailure" in [tags] {
      drop {}
    }
  }
  #--------------------type = datamanager--------------------
  if [type] == "datamanager" {
    # Loglijn opsplitsen in verschillende fields.
    grok {
      match => [ "message", "\[%{WORD}\] %{TIMESTAMP_ISO8601:TS-temp} %{NUMBER} \[Req%{NUMBER:ReqNumber:int}\] Calling %{GREEDYDATA:Request} \(caller:",
                 "message", "\[%{WORD}\] %{TIMESTAMP_ISO8601} %{NUMBER} \[Req%{NUMBER:ReqNumber:int}\] %{GREEDYDATA} executed in %{TIME:duration}",
                 "message", "\[%{WORD}\] %{TIMESTAMP_ISO8601:TS-temp} %{NUMBER} \[Req%{NUMBER:ReqNumber:int}\]\[#%{NUMBER:CmdNumber:int}\] command=\"%{GREEDYDATA:command}\"",
                 "message", "\[%{WORD}\] %{TIMESTAMP_ISO8601} %{NUMBER} \[Req%{NUMBER:ReqNumber:int}\]\[#%{NUMBER:CmdNumber:int}\] \[user-readable command, DM uses SQL parameters\]\n%{GREEDYDATA:user-readable_command}",
                 "message", "\[%{WORD}\] %{TIMESTAMP_ISO8601} %{NUMBER} \[Req%{NUMBER:ReqNumber:int}\]\[#%{NUMBER:CmdNumber:int}\] SQL execution time: %{TIME:duration}" ]
    }
    # Type updaten.
    if [CmdNumber] {
      mutate {
        update => { "type" => "datamanager_command" }
      }
    }
    else if [ReqNumber] {
      mutate {
        update => { "type" => "datamanager_call" }
      }
    }
    # duration omzetten van hh:mm:ss.mmmmmmm naar ssss.mmmmmmm
    if [duration] {
      dissect {
        mapping => { "duration" => "%{hh}:%{mm}:%{ss}" }
        convert_datatype => { hh => "int"
                              mm => "int"
                              ss => "float" }
      }
      ruby { code => "event.set('duration', event.get('hh') * 3600 + event.get('mm') * 60 + event.get('ss'))" }
    }
    # Timestamps omzetten naar ZULU timestamp en in het juiste field zetten.
    if [TS-temp] {
      date {
        timezone => "Europe/Brussels"
        match => [ "TS-temp", "yyyy-MM-dd HH:mm:ss" ]
        target => "TS-logged"
      }
    }
    # Overbodige velden weggooien.
    mutate {
      remove_field => [ "message", "TS-temp", "hh", "mm", "ss" ]
    }
  }
  #--------------------type = resourcerequests--------------------
  if [type] == "resourcerequests" {
    # Loglijn opsplitsen in verschillende fields.
    grok {
      match => [ "message", "\[%{WORD}\] %{TIMESTAMP_ISO8601:TS-temp} %{NUMBER} \[%{WORD:SOAPInterface}\] Webmethod %{WORD:SOAPMethod} called with params: %{GREEDYDATA:params}." ]
    }
    if [SOAPMethod] == "AddRequest" {
      grok {
        match => [ "params", "accessKey=%{UUID:accesskey}, resourceName=%{WORD:resourceName}, accessType=%{NUMBER:ReadWrite}, workflowID=%{UUID:workflowGUID}, prio=%{NUMBER:priority}, startTime=(%{DATA})?, objectID=%{DATA:DMGUID}, objectInfo=(%{DATA:Reason})?" ]
      }
      # Timestamps omzetten naar ZULU timestamp en in het juiste field zetten.
      date {
        timezone => "Europe/Brussels"
        match => [ "TS-temp", "yyyy-MM-dd HH:mm:ss" ]
        target => "TS-Requested"
      }
    }
    if [SOAPMethod] == "ReleaseResource" {
      grok {
        match => [ "params", "accessKey=%{UUID:accesskey}, resourceName=%{WORD:resourceName}, workflowID=%{UUID:workflowGUID}" ]
      }
      # Timestamps omzetten naar ZULU timestamp en in het juiste field zetten.
      date {
        timezone => "Europe/Brussels"
        match => [ "TS-temp", "yyyy-MM-dd HH:mm:ss" ]
        target => "TS-Released"
      }
    }
    if [SOAPMethod] == "GetRequestDetails" {
      drop {}
    }
    # Overbodige velden weggooien.
    mutate {
      remove_field => [ "TS-temp", "SOAPMethod", "params" ]
    }
  }
}

output {
  if [type] == "sessions" {
    elasticsearch {
      hosts => "localhost:9200"
      index => "depot-%{type}-%{+YYYY.MM}"
      document_id => "%{accesskey}"
      action => "update"
      doc_as_upsert => "true"
    }
  }
  if [type] == "lighttable_loadtimes" {
    elasticsearch {
      hosts => "localhost:9200"
      index => "depot-%{type}-%{+YYYY.MM}"
    }
  }
  if [type] == "video_analyses" {
    elasticsearch {
      hosts => "localhost:9200"
      index => "depot-%{type}-%{+YYYY.MM}"
      document_id => "%{WorkflowID}"
      action => "update"
      doc_as_upsert => "true"
    }
  }
  if [type] == "datamanager_call" {
    elasticsearch {
      hosts => "localhost:9200"
      index => "depot-%{type}-%{+YYYY.MM}"
      document_id => "%{ReqNumber}"
      action => "update"
      doc_as_upsert => "true"
    }
  }
  if [type] == "datamanager_command" {
    elasticsearch {
      hosts => "localhost:9200"
      index => "depot-%{type}-%{+YYYY.MM.dd}"
      document_id => "%{ReqNumber}-%{CmdNumber}"
      action => "update"
      doc_as_upsert => "true"
    }
  }
  if [type] == "resourcerequests" {
    elasticsearch {
      hosts => "localhost:9200"
      index => "depot-%{type}-%{+YYYY.MM.dd}"
      document_id => "%{workflowGUID}-%{resourceName}"
      action => "update"
      doc_as_upsert => "true"
    }
  }
}
